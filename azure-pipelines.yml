pool: 'Hosted VS2017'

pr: none

variables:
- group: vmusers
- name: 'major'
  value: '1'
- name: 'minor'
  value: '2'
- name: 'configname'
  value: 'windowsfirewallenabled'
- name: 'resourcegroup'
  value: 'contosodev-rfc_customguestconfig'


trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - LICENSE
    - .gitignore
    - .github/*

steps:
- powershell: |
    # Install Guest Config module from PowerShell Gallery
    Install-Module -Name 'GuestConfiguration' -Repository 'PSGallery' -Scope 'CurrentUser' -Force
    # Save required module for Firewall configuration script to perform audits
    New-Item -Path '$(System.DefaultWorkingDirectory)\customPolicyFiles\guestConfiguration\requirements\' -Type Directory
    Save-Module -Name 'NetworkingDsc' -Path '$(System.DefaultWorkingDirectory)\customPolicyFiles\guestConfiguration\requirements\'
    # Create content package
    New-Item -Path '$(System.DefaultWorkingDirectory)\package\' -Type Directory
    New-GuestConfigurationPackage -Name '$(configname)' `
    -Configuration '$(System.DefaultWorkingDirectory)\customPolicyFiles\guestConfiguration\$(configname).localhost.mof' `
    -FilesToInclude '$(System.DefaultWorkingDirectory)\customPolicyFiles\guestConfiguration\requirements\' `
    -DestinationPath '$(System.DefaultWorkingDirectory)' `
    -Verbose
  displayName: 'Create custom configuration package'

- task: PublishPipelineArtifact@0
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)\$(configname)\$(configname).zip'
    artifactName: '$(configname)'
  displayName: 'Publish package artifact'

- powershell: |
    # Get artifact details from Azure DevOps
    $artifact = (Invoke-RestMethod -Method GET -Uri 'https://dev.azure.com/azvmguestpolicy/CustomGuestConfiguration/_apis/build/builds/$(build.buildid)/artifacts?artifactName=$(configname)&fileName=$(configname).zip&api-version=5.0-preview.3').resource.downloadUrl
    # Download file and calculate hash value
    $package = Invoke-WebRequest -Uri $artifact -Out '$(System.DefaultWorkingDirectory)\$(configname).zip'
    $hash = Get-FileHash '$(System.DefaultWorkingDirectory)\$(configname).zip' | ForEach-Object {$_.Hash}
    # Insert file URI and hash value in to definition json
    foreach ($path in @('$(Build.SourcesDirectory)\customPolicyFiles\deployIfNotExists.rules.json','$(Build.SourcesDirectory)\deploy.json')){
      (get-content "$path").replace('"contentUri": null,',"`"contentUri`": `"$artifact`",") | set-content "$path" -force
      (get-content "$path").replace('"contentHash": null,',"`"contentHash`": `"$hash`",") | set-content "$path" -force
    }
  displayName: 'Update content with artifact location'

- powershell: |
    # PolicyInsights module requires the latest version of required Azure PowerShell modules
    Update-Module 'AzureRM' -force
  displayName: 'Update Azure PowerShell modules'

- task: AzurePowerShell@3
  displayName: 'Validate resource group and create if needed'
  inputs:
    azureSubscription: 'ARM'
    azurePowerShellVersion: 'latestVersion'
    scriptType: 'inlineScript'
    inline: |
      $ResourceGroup = Get-AzureRmResourceGroup -Name $(resourcegroup) -ErrorAction SilentlyContinue
      if ($null -eq $ResourceGroup) {$ResourceGroup = New-AzureRMResourceGroup -Name $(resourcegroup) -Location 'eastus2'}

- task: AzurePowerShell@3
  displayName: 'Publish deployifnotexists definition'
  inputs:
    azureSubscription: 'ARM'
    azurePowerShellVersion: 'latestVersion'
    scriptType: 'inlineScript'
    inline: |
      write-host 'Creating deployifnotexists definition'
      $deployIfNotExists = @{
        Name           = '163804a7-0bb0-4c98-a888-e6393dc92389'
        DisplayName    = '[RFC_CustomGuestConfig]: Deploy requirments to audit firewall settings'
        Description    = 'Custom Deploy if Not Exists rule to add VM extension, MSI, and guest assignment.'
        SubscriptionId = '$(SubscriptionID)'
        Mode           = 'Indexed'
        Policy         = "$(Build.SourcesDirectory)\customPolicyFiles\deployIfNotExists.rules.json"
        Metadata       = "$(Build.SourcesDirectory)\customPolicyFiles\deployIfNotExists.metadata.json"
        }
      $deployDef = New-AzureRMPolicyDefinition @deployIfNotExists

- task: AzurePowerShell@3
  displayName: 'Publish audit definition'
  inputs:
    azureSubscription: 'ARM'
    azurePowerShellVersion: 'latestVersion'
    scriptType: 'inlineScript'
    inline: |
      $auditIfNotExists = @{
        Name           = '3f6f3c70-1f39-4e6d-9ecc-8e1f377772f9'
        DisplayName    = '[RFC_CustomGuestConfig]: Audit firewall settings'
        Description    = 'Custom Audit policy rule.'
        SubscriptionId = '$(SubscriptionID)'
        Mode           = 'Indexed'
        Policy         = "$(Build.SourcesDirectory)\customPolicyFiles\audit.rules.json"
        Metadata       = "$(Build.SourcesDirectory)\customPolicyFiles\audit.metadata.json"
        }
      $auditDef = New-AzureRMPolicyDefinition @auditIfNotExists

- task: AzurePowerShell@3
  displayName: 'Publish initiative definition'
  inputs:
    azureSubscription: 'ARM'
    azurePowerShellVersion: 'latestVersion'
    scriptType: 'inlineScript'
    inline: |
      #workaround
      (get-content '$(Build.SourcesDirectory)\customPolicyFiles\initiative.rules.json').replace('subscriptionID','$(subscriptionID)') | set-content '$(Build.SourcesDirectory)\customPolicyFiles\initiative.rules.json' -force

      $policySet = @{
        Name             = '62f70032-c579-42ce-9ced-2e49c8f89194'
        DisplayName      = '[RFC_CustomGuestConfig]: Onboard and Audit custom guest configuration'
        Description      = 'CD/CD solution for custom guest config validation.'
        SubscriptionId   = '$(SubscriptionID)'
        PolicyDefinition = '$(Build.SourcesDirectory)\customPolicyFiles\initiative.rules.json'
        Metadata         = '$(Build.SourcesDirectory)\customPolicyFiles\initiative.metadata.json'
      }
      $setDef = New-AzureRmPolicySetDefinition @policySet

- task: AzurePowerShell@3
  displayName: 'Assign initiative to resource group'
  inputs:
    azureSubscription: 'ARM'
    azurePowerShellVersion: 'latestVersion'
    scriptType: 'inlineScript'
    inline: |      
      $initiative = Get-AzureRmPolicySetDefinition -Name '62f70032-c579-42ce-9ced-2e49c8f89194'
      $ResourceGroup = Get-AzureRmResourceGroup -Name $(resourcegroup)
      
      $assignment = @{
        Name = '8c17a7d8-6071-470d-a023-2776f207f296'
        DisplayName = '[RFC_CustomGuestConfig]: Functional validation for custom guest configuration'
        Description = 'Assigns an initiative that includes both the deploy and audit policies required for a custom guest configuration'
        PolicySetDefinition = $initiative
        Scope = $ResourceGroup.ResourceId
        Location = 'eastus2'
        AssignIdentity = $true
      }
      $assignment = New-AzureRmPolicyAssignment @assignment

      # Hold for directory replication
      Start-sleep 60

      $deployDef = Get-AzureRmPolicyDefinition -Name '163804a7-0bb0-4c98-a888-e6393dc92389'
      $roleDefinitionIds = $deployDef.Properties.policyRule.then.details.roleDefinitionIds

      if ($roleDefinitionIds.Count -gt 0)
      {
          $roleDefinitionIds | ForEach-Object {
              $roleDefId = $_.Split("/") | Select-Object -Last 1
              $roleAssignment = Get-AzureRMRoleAssignment -Scope $ResourceGroup.ResourceId -ObjectId $assignment.Identity.PrincipalId -RoleDefinitionId $roleDefId -ErrorAction SilentlyContinue
              If ($null -eq $roleAssignment) {
                New-AzureRmRoleAssignment -Scope $ResourceGroup.ResourceId -ObjectId $assignment.Identity.PrincipalId -RoleDefinitionId $roleDefId -ErrorAction SilentlyContinue
              }
          }
      }
