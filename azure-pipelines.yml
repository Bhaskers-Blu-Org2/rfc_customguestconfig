pool: 
  vmImage: 'windows-2019'

pr: none

variables:
  - group: vmusers
  - name: 'major'
    value: '1'
  - name: 'minor'
    value: '2'
  - name: 'requiredModules'
    value: 'GuestConfiguration' 
  - name: 'linuxConfigName'
    value: 'firewalldenabled'
  - name: 'windowsConfigName'
    value: 'windowsfirewallenabled'
  - name: 'resourcegroup'
    value: 'contosodev-rfc_customguestconfig'
  - name: 'LinuxInitiativeId'
    value: ''
  - name: 'WindowsInitiativeId'
    value: ''

trigger:
  branches:
    include:
    - master
    - dev
  paths:
    exclude:
    - README.md
    - LICENSE
    - .gitignore
    - .github/*

steps:
- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: 'false'
    script: |
      
      # TEMP DEBUG
      Get-ChildItem -Path $(Agent.BuildDirectory) -Verbose

      # Install required modules from PowerShell Gallery
      Install-Module -Name $(requiredModules),PSScriptAnalyzer -Repository 'PSGallery' -Scope 'CurrentUser' -Verbose -Force
      
  displayName: 'Setup/validate Windows PowerShell environment'

- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: 'false'
    script: |
      
      # Lint PowerShell scripts
      Invoke-ScriptAnalyzer -Path '$(Agent.BuildDirectory)\guestConfiguration\' -IncludeDefaultRules -Recurse -Severity Error -ReportSummary -EnableExit

  displayName: 'Lint PowerShell scripts in Guest Configuration content'

- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: 'false'
    script: |

      # Compile DSC MOF files
      
        # Linux configuration
        . $(Agent.BuildDirectory)\guestConfiguration\Linux\$(linuxConfigName).ps1
        $(linuxConfigName) -out '$(Agent.BuildDirectory)\guestConfiguration\Linux'

        # Windows configuration
        . $(Agent.BuildDirectory)\guestConfiguration\Windows\$(windowsConfigName).ps1
        $(windowsConfigName) -out '$(Agent.BuildDirectory)\guestConfiguration\Windows'
      
  displayName: 'Compile DSC MOF files'

- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: 'false'
    script: |

      # Create artifacts folder
      New-Item -Path '$(Agent.BuildDirectory)\artifacts\' -Type Directory
      
      # Create artifacts
      
        # New guest configuration package for Linux
        New-GuestConfigurationPackage -Name '$(linuxConfigName)' `
        -Configuration '$(Agent.BuildDirectory)\guestConfiguration\Linux\$(linuxConfigName).mof' `
        -FilesToInclude '$(Agent.BuildDirectory)\guestConfiguration\Linux\InSpecProfiles' `
        -DestinationPath '$(Agent.BuildDirectory)\artifacts\' `
        -Verbose

        # New guest configuration package for Windows
        New-GuestConfigurationPackage -Name '$(windowsConfigName)' `
        -Configuration '$(Agent.BuildDirectory)\guestConfiguration\Windows\$(windowsConfigName).mof' `
        -DestinationPath '$(Agent.BuildDirectory)\artifacts\' `
        -Verbose
  
  displayName: 'Create content artifacts'

- task: AzureResourceGroupDeployment@2
  inputs:
      azureSubscription: 'ARM'
      resourceGroupName: $(resourcegroup)
      csmFile: '$(Agent.BuildDirectory)\deploymentFiles\deploy.storagecontainer.json'

  displayName: 'Create/validate Azure storage account and container'

- task: AzurePowerShell@4
  inputs:
    azureSubscription: 'ARM'
    azurePowerShellVersion: 'latestVersion'
    scriptType: 'inlineScript'
    inline: |

      # Upload files
      Set-AzStorageBlobContent -Context $Context -Container $Container.Name -File '$(Agent.BuildDirectory)\artifacts\$(linuxConfigName)\$(linuxConfigName).zip' -Blob '$(linuxConfigName).zip' -Force -Verbose
      Set-AzStorageBlobContent -Context $Context -Container $Container.Name -File '$(Agent.BuildDirectory)\artifacts\$(windowsConfigName)\$(windowsConfigName).zip' -Blob '$(windowsConfigName).zip' -Force -Verbose

      # Get url with SAS token
      $StartTime = (Get-Date)
      $ExpiryTime = $StartTime.AddYears('3')
      $linuxArtifactSAS = New-AzStorageBlobSASToken -Context $Context -Container $Container.Name -Blob 'firewalldenabled.zip' -StartTime $StartTime -ExpiryTime $ExpiryTime -Permission rl -FullUri -Verbose
      $windowsArtifactSAS = New-AzStorageBlobSASToken -Context $Context -Container $Container.Name -Blob 'windowsfirewallenabled.zip' -StartTime $StartTime -ExpiryTime $ExpiryTime -Permission rl -FullUri -Verbose

      # Overwrite definition/initiative files
      New-GuestConfigurationPolicy -ContentUri $linuxArtifactSAS -DisplayName 'Audit when Firewalld is not enabled' -Description 'Validates that the Firewalld package is installed, running, and that the default zone is public' -Version 1.0.0.0 -DestinationPath '$(Agent.BuildDirectory)\policyFiles\Linux' -Platform Linux -Verbose
      New-GuestConfigurationPolicy -ContentUri $windowsArtifactSAS -DisplayName 'Audit when Windows Firewall is not enabled' -Description 'Validates that the Windows host firewall package is enabled and that the default zone is public' -Version 1.0.0.0 -DestinationPath '$(Agent.BuildDirectory)\policyFiles\Windows' -Platform Windows -Verbose
      
      # Publish definitions/initiatives
      $publishedLinuxPolicies = Publish-GuestConfigurationPolicy -Path '$(Agent.BuildDirectory)\policyFiles\Linux\' -Verbose
      $publishedWindowsPolicies = Publish-GuestConfigurationPolicy -Path '$(Agent.BuildDirectory)\policyFiles\Windows\' -Verbose

      # Update InitiativeID so it can be passed to assignment
      $(LinuxInitiativeId) = Get-AzPolicySetDefinition -Name $($publishedLinuxPolicies | ? ResourceType -eq 'Microsoft.Authorization/policySetDefinitions').Name
      $(WindowsInitiativeId) = Get-AzPolicySetDefinition -Name $($publishedWindowsPolicies | ? ResourceType -eq 'Microsoft.Authorization/policySetDefinitions').Name
      
  displayName: 'Upload artifacts, get SAS tokens and publish definitions/initives'

- task: AzureResourceGroupDeployment@2
  inputs:
      azureSubscription: 'ARM'
      resourceGroupName: $(resourcegroup)
      csmFile: '$(Agent.BuildDirectory)\deploymentFiles\deploy.assignment.json'
      overrideParameters: -assignmentName "firewalldenabled" -assignmentDisplayName "Audit when Firewalld is not enabled" -initiativeId $(LinuxInitiativeId) -resourceGroupName $(resourcegroup)

  displayName: 'Deploy Policy assignment for Linux'

- task: AzureResourceGroupDeployment@2
  inputs:
      azureSubscription: 'ARM'
      resourceGroupName: $(resourcegroup)
      csmFile: '$(Agent.BuildDirectory)\deploymentFiles\/deploy.assignment.json'
      overrideParameters: -assignmentName "windowsfirewallenabled" -assignmentDisplayName "Audit when Windows Firewall is not enabled" -initiativeId $(WindowsInitiativeId) -resourceGroupName $(resourcegroup)

  displayName: 'Deploy Policy assignment for Windows'

- task: AzureResourceGroupDeployment@2
  inputs:
      azureSubscription: 'ARM'
      resourceGroupName: $(resourcegroup)
      csmFile: '$(Agent.BuildDirectory)\deploymentFiles\/deploy.roleassignment.json'
      overrideParameters: -assignmentName "firewalldenabled"

  displayName: 'Deploy Policy role assignment for Linux'

- task: AzureResourceGroupDeployment@2
  inputs:
      azureSubscription: 'ARM'
      resourceGroupName: $(resourcegroup)
      csmFile: '$(Agent.BuildDirectory)\deploymentFiles\/deploy.roleassignment.json'
      overrideParameters: -assignmentName "windowsfirewallenabled"

  displayName: 'Deploy Policy role assignment for Windows'
  