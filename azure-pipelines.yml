pool: 
  vmImage: 'windows-2019'

pr: none

variables:
  - group: vmusers
  - name: 'major'
    value: '1'
  - name: 'minor'
    value: '2'
  - name: 'requiredModules'
    value: 'GuestConfiguration' 
  - name: 'linuxConfigName'
    value: 'firewalldenabled'
  - name: 'windowsConfigName'
    value: 'windowsfirewallenabled'
  - name: 'resourcegroup'
    value: 'contosodev-rfc_customguestconfig'

trigger:
  branches:
    include:
    - master
    - dev
  paths:
    exclude:
    - README.md
    - LICENSE
    - .gitignore
    - .github/*

steps:
- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: 'false'
    script: |
      
      # Install required modules from PowerShell Gallery
      Install-Module -Name $(requiredModules),PSScriptAnalyzer -Repository 'PSGallery' -Scope 'CurrentUser' -Verbose -Force
      
  displayName: 'Setup/validate Windows PowerShell environment'

- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: 'false'
    script: |
      
      # Lint PowerShell scripts
      Invoke-ScriptAnalyzer -Path '$(System.DefaultWorkingDirectory)\guestConfiguration\' -IncludeDefaultRules -Recurse -Severity Error -ReportSummary -EnableExit

  displayName: 'Lint PowerShell scripts in Guest Configuration content'

- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: 'false'
    script: |

      # Compile DSC MOF files
      
        # Linux configuration
        . $(System.DefaultWorkingDirectory)\guestConfiguration\Linux\$(linuxConfigName).ps1
        $(linuxConfigName) -out '$(System.DefaultWorkingDirectory)\guestConfiguration\Linux'

        # Windows configuration
        . $(System.DefaultWorkingDirectory)\guestConfiguration\Windows\$(windowsConfigName).ps1
        $(windowsConfigName) -out '$(System.DefaultWorkingDirectory)\guestConfiguration\Windows'
      
  displayName: 'Compile DSC MOF files'

- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: 'false'
    script: |

      # Create artifacts folder
      New-Item -Path '$(System.DefaultWorkingDirectory)\artifacts\' -Type Directory
      
      # Create artifacts
      
        # New guest configuration package for Linux
        New-GuestConfigurationPackage -Name '$(linuxConfigName)' `
        -Configuration '$(System.DefaultWorkingDirectory)\guestConfiguration\Linux\$(linuxConfigName).mof' `
        -FilesToInclude '$(System.DefaultWorkingDirectory)\guestConfiguration\Linux\InSpecProfiles' `
        -DestinationPath '$(System.DefaultWorkingDirectory)\artifacts\' `
        -Verbose

        # New guest configuration package for Windows
        New-GuestConfigurationPackage -Name '$(windowsConfigName)' `
        -Configuration '$(System.DefaultWorkingDirectory)\guestConfiguration\Windows\$(windowsConfigName).mof' `
        -DestinationPath '$(System.DefaultWorkingDirectory)\artifacts\' `
        -Verbose

      # Confirm output
      Write-Verbose 'Validate artifacts folder:'
      Test-Path -Path '$(System.DefaultWorkingDirectory)\artifacts\' -Verbose
      Write-Verbose 'Validate Linux artifact'
      Test-Path -Path '$(System.DefaultWorkingDirectory)\artifacts\$(linuxConfigName)\$(linuxConfigName).zip' -Verbose
      Write-Verbose 'Validate Windows artifact'
      Test-Path -Path '$(System.DefaultWorkingDirectory)\artifacts\$(windowsConfigName)\$(windowsConfigName).zip' -Verbose
  
  continueOnError: 'true'
  displayName: 'Create content artifacts'

- task: AzurePowerShell@4
  inputs:
    azureSubscription: 'ARM'
    azurePowerShellVersion: 'latestVersion'
    scriptType: 'inlineScript'
    inline: |
      
      # Verify resource group exists
      $ResourceGroup = Get-AzResourceGroup -Name $(resourcegroup) -ErrorAction SilentlyContinue
      if ($null -eq $ResourceGroup) {$ResourceGroup = New-AzResourceGroup -Name $(resourcegroup) -Location 'eastus2' -Verbose}

      # Verify storage account exists
      $StorageAccount = Get-AzStorageAccount -ResourceGroupName $(resourcegroup) -AccountName 'guestconfiguration' -ErrorAction SilentlyContinue
      if ($null -eq $StorageAccount) {$StorageAccount = New-AzStorageAccount -ResourceGroupName $(resourcegroup) -AccountName 'guestconfiguration' -Location eastus -SkuName Standard_GRS -Verbose}
      $Context = $StorageAccount.Context

      # Verify storage container exists
      $Container = $StorageAccount | Get-AzStorageContainer -Name 'artifacts' -ErrorAction SilentlyContinue
      if ($null -eq $Container) {$Container = New-AzStorageContainer -Name 'artifacts' -Context $Context -Permission Off -Verbose}

      # Upload files
      Set-AzStorageBlobContent -Context $Context -Container $Container -File '$(System.DefaultWorkingDirectory)\artifacts\$(linuxConfigName)\$(linuxConfigName).zip' -Blob '$(linuxConfigName).zip' -Force -Verbose
      Set-AzStorageBlobContent -Context $Context -Container $Container -File '$(System.DefaultWorkingDirectory)\artifacts\$(windowsConfigName)\$(windowsConfigName).zip' -Blob '$(windowsConfigName).zip' -Force -Verbose

  displayName: 'Publish content to Azure storage'  
