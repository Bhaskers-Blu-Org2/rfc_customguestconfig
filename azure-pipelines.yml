pool: 
  vmImage: 'windows-2019'

pr: none

variables:
  - group: vmusers
  - name: 'major'
    value: '1'
  - name: 'minor'
    value: '2'
  - name: 'requiredModules'
    value: 'GuestConfiguration' 
  - name: 'linuxConfigName'
    value: 'firewalldenabled'
  - name: 'windowsConfigName'
    value: 'windowsfirewallenabled'
  - name: 'resourcegroup'
    value: 'contosodev-rfc_customguestconfig'
  - name: 'LinuxInitiativeId'
    value: '9ec11fb3-74ff-4901-af91-b3535886bb02'
  - name: 'WindowsInitiativeId'
    value: 'f021d4ca-a153-4fc3-8c27-a997abe273cc'

trigger:
  branches:
    include:
    - master
    - dev
  paths:
    exclude:
    - README.md
    - LICENSE
    - .gitignore
    - .github/*

steps:
- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: 'false'
    script: |
      
      # Install required modules from PowerShell Gallery
      Install-Module -Name $(requiredModules),PSScriptAnalyzer -Repository 'PSGallery' -Scope 'CurrentUser' -Verbose -Force
      
  displayName: 'Setup/validate Windows PowerShell environment'

- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: 'false'
    script: |
      
      # Lint PowerShell scripts
      Invoke-ScriptAnalyzer -Path '$(System.DefaultWorkingDirectory)\guestConfiguration\' -IncludeDefaultRules -Recurse -Severity Error -ReportSummary -EnableExit

  displayName: 'Lint PowerShell scripts in Guest Configuration content'

- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: 'false'
    script: |

      # Compile DSC MOF files
      
        # Linux configuration
        . $(System.DefaultWorkingDirectory)\guestConfiguration\Linux\$(linuxConfigName).ps1
        $(linuxConfigName) -out '$(System.DefaultWorkingDirectory)\guestConfiguration\Linux'

        # Windows configuration
        . $(System.DefaultWorkingDirectory)\guestConfiguration\Windows\$(windowsConfigName).ps1
        $(windowsConfigName) -out '$(System.DefaultWorkingDirectory)\guestConfiguration\Windows'
      
  displayName: 'Compile DSC MOF files'

- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: 'false'
    script: |

      # Create artifacts folder
      New-Item -Path '$(System.DefaultWorkingDirectory)\artifacts\' -Type Directory
      
      # Create artifacts
      
        # New guest configuration package for Linux
        New-GuestConfigurationPackage -Name '$(linuxConfigName)' `
        -Configuration '$(System.DefaultWorkingDirectory)\guestConfiguration\Linux\$(linuxConfigName).mof' `
        -FilesToInclude '$(System.DefaultWorkingDirectory)\guestConfiguration\Linux\InSpecProfiles' `
        -DestinationPath '$(System.DefaultWorkingDirectory)\artifacts\' `
        -Verbose

        # New guest configuration package for Windows
        New-GuestConfigurationPackage -Name '$(windowsConfigName)' `
        -Configuration '$(System.DefaultWorkingDirectory)\guestConfiguration\Windows\$(windowsConfigName).mof' `
        -DestinationPath '$(System.DefaultWorkingDirectory)\artifacts\' `
        -Verbose

      # Confirm output
      Write-Verbose 'Validate artifacts folder:'
      Test-Path -Path '$(System.DefaultWorkingDirectory)\artifacts\' -Verbose
      Write-Verbose 'Validate Linux artifact'
      Test-Path -Path '$(System.DefaultWorkingDirectory)\artifacts\$(linuxConfigName)\$(linuxConfigName).zip' -Verbose
      Write-Verbose 'Validate Windows artifact'
      Test-Path -Path '$(System.DefaultWorkingDirectory)\artifacts\$(windowsConfigName)\$(windowsConfigName).zip' -Verbose
  
  displayName: 'Create content artifacts'

- task: AzureResourceGroupDeployment@2
  inputs:
      azureSubscription: 'ARM'
      resourceGroupName: $(resourceroup)
      templateLocation: 'https://raw.githubusercontent.com/Microsoft/rfc_customguestconfig/dev/rfc_customguestconfig/deploy.storagecontainer.json'

  displayName: 'Create/validate Azure storage account and container'

- task: AzurePowerShell@4
  inputs:
    azureSubscription: 'ARM'
    azurePowerShellVersion: 'latestVersion'
    scriptType: 'inlineScript'
    inline: |

      # Upload files
      Set-AzStorageBlobContent -Context $Context -Container $Container.Name -File '$(System.DefaultWorkingDirectory)\artifacts\$(linuxConfigName)\$(linuxConfigName).zip' -Blob '$(linuxConfigName).zip' -Force -Verbose
      Set-AzStorageBlobContent -Context $Context -Container $Container.Name -File '$(System.DefaultWorkingDirectory)\artifacts\$(windowsConfigName)\$(windowsConfigName).zip' -Blob '$(windowsConfigName).zip' -Force -Verbose

      # Get url with SAS token
      $StartTime = (Get-Date)
      $ExpiryTime = $StartTime.AddYears('3')
      $linuxArtifactSAS = New-AzStorageBlobSASToken -Context $Context -Container $Container.Name -Blob 'firewalldenabled.zip' -StartTime $StartTime -ExpiryTime $ExpiryTime -Permission rl -FullUri -Verbose
      $windowsArtifactSAS = New-AzStorageBlobSASToken -Context $Context -Container $Container.Name -Blob 'windowsfirewallenabled.zip' -StartTime $StartTime -ExpiryTime $ExpiryTime -Permission rl -FullUri -Verbose

      # Overwrite definition/initiative files
      New-GuestConfigurationPolicy -ContentUri $linuxArtifactSAS -DisplayName 'Audit when Firewalld is not enabled' -Description 'Validates that the Firewalld package is installed, running, and that the default zone is public' -Version 1.0.0.0 -DestinationPath '$(System.DefaultWorkingDirectory)\policyFiles\Linux' -Platform Linux -Verbose
      New-GuestConfigurationPolicy -ContentUri $windowsArtifactSAS -DisplayName 'Audit when Windows Firewall is not enabled' -Description 'Validates that the Windows host firewall package is enabled and that the default zone is public' -Version 1.0.0.0 -DestinationPath '$(System.DefaultWorkingDirectory)\policyFiles\Windows' -Platform Windows -Verbose

      # Update Linux policy InitiativeID so it can be passed consistently to assignment
      $linuxInitiative = Get-Content -path '$(System.DefaultWorkingDirectory)\policyFiles\Linux\Initiative.json' | ConvertFrom-JSON
      $generatedLinuxInitiativeId = $linuxInitiative.Name
      $linuxInitiative.Name = $(LinuxInitiativeId)
      $linuxInitiative.Id = $linuxInitiative.Id -replace $generatedInitiativeId, $(LinuxInitiativeId)
      $linuxInitiative | ConvertFrom-JSON | Set-Content -path '$(System.DefaultWorkingDirectory)\policyFiles\Linux\Initiative.json'

      # Update Windows policy InitiativeID so it can be passed consistently to assignment
      $windowsInitiative = Get-Content -path '$(System.DefaultWorkingDirectory)\policyFiles\Windows\Initiative.json' | ConvertFrom-JSON
      $generatedWindowsInitiativeId = $windowsInitiative.Name
      $windowsInitiative.Name = $(WindowsInitiativeId)
      $windowsInitiative.Id = $windowsInitiative.Id -replace $generatedInitiativeId, $(WindowsInitiativeId)
      $windowsInitiative | ConvertFrom-JSON | Set-Content -path '$(System.DefaultWorkingDirectory)\policyFiles\Windows\Initiative.json'

      # Publish definitions/initiatives
      $publishedLinuxPolicies = Publish-GuestConfigurationPolicy -Path '$(System.DefaultWorkingDirectory)\policyFiles\Linux\' -Verbose
      $publishedWindowsPolicies = Publish-GuestConfigurationPolicy -Path '$(System.DefaultWorkingDirectory)\policyFiles\Windows\' -Verbose

  displayName: 'Upload artifacts, get SAS tokens and publish definitions/initives'

- task: AzureResourceGroupDeployment@2
  inputs:
      azureSubscription: 'ARM'
      resourceGroupName: $(resourceroup)
      templateLocation: 'https://raw.githubusercontent.com/Microsoft/rfc_customguestconfig/dev/rfc_customguestconfig/deploy.assignment.json'
      overrideParameters: -assignmentName "firewalldenabled" -assignmentDisplayName "Audit when Firewalld is not enabled" -initiativeId $(LinuxInitiativeId) -resourceGroupName $(resourceroup)

  displayName: 'Deploy Policy assignment for Linux'

- task: AzureResourceGroupDeployment@2
  inputs:
      azureSubscription: 'ARM'
      resourceGroupName: $(resourceroup)
      templateLocation: 'https://raw.githubusercontent.com/Microsoft/rfc_customguestconfig/dev/rfc_customguestconfig/deploy.assignment.json'
      overrideParameters: -assignmentName "windowsfirewallenabled" -assignmentDisplayName "Audit when Windows Firewall is not enabled" -initiativeId $(WindowsInitiativeId) -resourceGroupName $(resourceroup)

  displayName: 'Deploy Policy assignment for Windows'

- task: AzureResourceGroupDeployment@2
  inputs:
      azureSubscription: 'ARM'
      resourceGroupName: $(resourceroup)
      templateLocation: 'https://raw.githubusercontent.com/Microsoft/rfc_customguestconfig/dev/rfc_customguestconfig/deploy.roleassignment.json'
      overrideParameters: -assignmentName "firewalldenabled"

  displayName: 'Deploy Policy role assignment for Linux'

- task: AzureResourceGroupDeployment@2
  inputs:
      azureSubscription: 'ARM'
      resourceGroupName: $(resourceroup)
      templateLocation: 'https://raw.githubusercontent.com/Microsoft/rfc_customguestconfig/dev/rfc_customguestconfig/deploy.roleassignment.json'
      overrideParameters: -assignmentName "windowsfirewallenabled"

  displayName: 'Deploy Policy role assignment for Windows'
  